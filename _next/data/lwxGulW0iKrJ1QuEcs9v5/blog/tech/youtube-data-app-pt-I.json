{"pageProps":{"results":[{"id":19,"title":"Building a Data App Pt. I","description":"Analyzing the performance of a Youtube channel with the help of the Youtube API and FastAPI.","content":"\nYoutube is the biggest video platform in the world. This app aims to analyze the performance of a channel and also try to answer some questions such as:  What are the top videos of the channel? Which videos have the highest engagement? and what's the conversation around them?\n\nI'm going to use different technologies to build this app. Here's a list of some of them:\n- FastAPI\n- TailwindCSS\n- The Youtube API\n- ChartJS\n- HTML/JS/CSS\n- Python/Pandas\n- Docker\n- Azure VM\n\n## 1. Getting the Data\nThe most important part of this app is the data about the channel and the videos. In order to get this data, I'm going to rely heavily on the Youtube API. This API is super robust and gives access to tons of interesting data. Here's the code I used and a brief explanation about how I used it.\n\n### 1.1 API_KEY\nTo get access to the Youtube API you need an api_key. Here's an [**article**](https://blog.hubspot.com/website/how-to-get-youtube-api-key) from Hotspot about how to get it. \n\nIn summary, you need to have a Google account, then you must go to the [Google API](https://developers.google.com/apis-explorer) explorer, activate the Youtube service, and generate a key. \n\nOnce you have it, we can continue with the process.\n\n### 1.2 Python Virtual Environment\nSince I'm going to deploy this app on a Virtual Machine I'm going to generate a Virtual Environment with Python. This will help me to keep all my key files in a single place and keep all my python packages organized.\n\nTo create this environment I will use the next command on my terminal. (This command only works on Unix-based systems, such as MACOS or Ubuntu)\n\n```shell\npython3 -m venv env\n```\n\n### 1.3 `requirements.txt`\nNow we´re gonna create a file called `requirements.txt`. This file will include the name of all the python packages that we are going to use on this project. Then we will install all those packages in our virtual environment.\n\n```shell\ntouch requirements.txt\n```\n\nThese are the main packages that we're gonna install in the project:\n\n```txt\n##requirements.txt\n\nfastapi\npydantic\nuvicorn[standard]\npandas\ngoogle-api-python-client \ngoogle-auth-httplib2 \ngoogle-auth-oauthlib\npython-dotenv\nlock\nrequests\njinja2\naiofiles\n```\n\n### 1.4 File structure\nAt this point, you must have the next files in your folder:\n\n```\n├── env\n├── requirements.txt\n```\n\nNow we will add a new folder called `app` which will include the next files/folders\n\n```\n├── env\n├── requirements.txt\n├── app\n│   ├── main.py\n│   ├── youtube_scripts.py\n│   ├── static\n│   │   ├── styles.css\n│   ├── templates\n│   │   ├── index.html\n│   │   ├── layout.html\n│   │   ├── post.html\n│   │   ├── input.css\n│   ├── __init__.py\n│   ├── .env\n```\nI will explain how all these files work throughout this post.\n\n### 1.6 `.env`\nThe `.env` file is used to store all the environmental variables for our project. In our case, we're only gonna use one. The youtube_key. There are many security benefits to using this kind of file. For example, by using it the secret keys are not exposed to the client.\n\n```txt\n#.env\nyoutube_key = <Your Youtube API Key>\n```\n\n### 1.5  ` youtube_scripts.py`\nThis file will contain all the scripts that we're gonna use to interact with the Youtube API and send that data to our frontend.\n\n[**Here's**](https://googleapis.github.io/google-api-python-client/docs/dyn/youtube_v3.html) the documentation for the python library that we're using to extract data. \n\nYou can get all the functions that I created for this project and a brief explanation of how they work on my Github repo. [**Click here**]() to check the repo.\n\nBefore we continue, copy and paste the files from Github into the ` youtube_scripts.py`. We're gonna use all those functions to retrieve our data from youtube.\n\n## 2. FastAPI. The quick version\n\n## 3. Adding TailwindCSS\n\n```shell\nnpm init -y\n```\nNow  we're going to add [Tailwind](https://tailwindcss.com/docs) to the project. To do it first we need to install the necessary dependencies inside our `templates` folder. We do it using the next commands:\n\n```shell\nnpm install -D tailwindcss\nnpx tailwindcss init\n```\n\nThis will generate a couple of folders. Open the one called `tailwind.config.js` and add the next snippet of code:\n\n```js\n//tailwind.config.js\n\nmodule.exports = {\n  content: [\"./*.html\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nThen open the file called `input.css` and add the next snippet of code:\n\n```css\n/* input.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nFinally, run the next command on the terminal.\n\n```shell\nnpx tailwindcss -i ./input.css -o ./static/output.css --watch\n```\n\nThis command will start a node server that will generate the style sheet for our project. All the styles will be saved on the `static` folder.\n\nOur folder structure should look like this at this point:\n\n```\n├── env\n├── requirements.txt\n├── app\n│   ├── main.py\n│   ├── youtube_scripts.py\n│   ├── static\n│   │   ├── output.css\n│   ├── templates\n│   │   ├──node_modules\n│   │   ├── index.html\n│   │   ├── layout.html\n│   │   ├── blog.html\n│   │   ├── input.css\n│   │   ├── package.json\n│   │   ├── tailwind.config.js\n│   │   ├── package.json.lock\n│   ├── __init__.py\n│   ├── .env\n```\n\n## 4. Designing the layout\n\n```html\n<!--layout.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Twitch App</title>\n    <link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\">\n</head>\n<body>\n    <!-- <div class=\"w-screen h-screen bg-red-200 flex items-center align-center\">\n        <p class=\"text-2xl font-semibold\">Welcome!</p>\n    </div> -->\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n```\n\n## 4.1 Jinja Syntax\n\n```html\n<!-- index.html-->\n\n{% extends \"layout.html\" %}\n{% block content %}\n    <h1>Hello World!</h1>\n{% endblock %}\n```\n\n## 5. Using ChartJS\n## 6. Adding a Blog Section\n\n","slug":"youtube-data-app-pt-I","published_at":"2021-12-22T03:11:16.370Z","created_at":"2021-12-21T05:44:46.375Z","updated_at":"2021-12-22T03:11:16.404Z","user":{"id":1,"username":"gmarr","email":"me@gmarr.com","provider":"local","confirmed":true,"blocked":false,"role":1,"created_at":"2021-09-27T19:44:38.166Z","updated_at":"2021-09-27T19:46:35.202Z"}}],"source":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(t,n,a)=>n in t?c(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,e=(t,n)=>{for(var a in n||(n={}))l.call(n,a)&&p(t,a,n[a]);if(i)for(var a of i(n))s.call(n,a)&&p(t,a,n[a]);return t},r=(t,n)=>d(t,u(n));var h=(t,n)=>{var a={};for(var o in t)l.call(t,o)&&n.indexOf(o)<0&&(a[o]=t[o]);if(t!=null&&i)for(var o of i(t))n.indexOf(o)<0&&s.call(t,o)&&(a[o]=t[o]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var o=a,{components:t}=o,n=h(o,[\"components\"]);return mdx(MDXLayout,r(e(e({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Youtube is the biggest video platform in the world. This app aims to analyze the performance of a channel and also try to answer some questions such as:  What are the top videos of the channel? Which videos have the highest engagement? and what's the conversation around them?\"),mdx(\"p\",null,\"I'm going to use different technologies to build this app. Here's a list of some of them:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"FastAPI\"),mdx(\"li\",{parentName:\"ul\"},\"TailwindCSS\"),mdx(\"li\",{parentName:\"ul\"},\"The Youtube API\"),mdx(\"li\",{parentName:\"ul\"},\"ChartJS\"),mdx(\"li\",{parentName:\"ul\"},\"HTML/JS/CSS\"),mdx(\"li\",{parentName:\"ul\"},\"Python/Pandas\"),mdx(\"li\",{parentName:\"ul\"},\"Docker\"),mdx(\"li\",{parentName:\"ul\"},\"Azure VM\")),mdx(\"h2\",null,\"1. Getting the Data\"),mdx(\"p\",null,\"The most important part of this app is the data about the channel and the videos. In order to get this data, I'm going to rely heavily on the Youtube API. This API is super robust and gives access to tons of interesting data. Here's the code I used and a brief explanation about how I used it.\"),mdx(\"h3\",null,\"1.1 API_KEY\"),mdx(\"p\",null,\"To get access to the Youtube API you need an api_key. Here's an \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://blog.hubspot.com/website/how-to-get-youtube-api-key\"}),mdx(\"strong\",{parentName:\"a\"},\"article\")),\" from Hotspot about how to get it. \"),mdx(\"p\",null,\"In summary, you need to have a Google account, then you must go to the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://developers.google.com/apis-explorer\"}),\"Google API\"),\" explorer, activate the Youtube service, and generate a key. \"),mdx(\"p\",null,\"Once you have it, we can continue with the process.\"),mdx(\"h3\",null,\"1.2 Python Virtual Environment\"),mdx(\"p\",null,\"Since I'm going to deploy this app on a Virtual Machine I'm going to generate a Virtual Environment with Python. This will help me to keep all my key files in a single place and keep all my python packages organized.\"),mdx(\"p\",null,\"To create this environment I will use the next command on my terminal. (This command only works on Unix-based systems, such as MACOS or Ubuntu)\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`python3 -m venv env\n`)),mdx(\"h3\",null,\"1.3 \",mdx(\"inlineCode\",{parentName:\"h3\"},\"requirements.txt\")),mdx(\"p\",null,\"Now we\\xB4re gonna create a file called \",mdx(\"inlineCode\",{parentName:\"p\"},\"requirements.txt\"),\". This file will include the name of all the python packages that we are going to use on this project. Then we will install all those packages in our virtual environment.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`touch requirements.txt\n`)),mdx(\"p\",null,\"These are the main packages that we're gonna install in the project:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-txt\"}),`##requirements.txt\n\nfastapi\npydantic\nuvicorn[standard]\npandas\ngoogle-api-python-client \ngoogle-auth-httplib2 \ngoogle-auth-oauthlib\npython-dotenv\nlock\nrequests\njinja2\naiofiles\n`)),mdx(\"h3\",null,\"1.4 File structure\"),mdx(\"p\",null,\"At this point, you must have the next files in your folder:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\u251C\\u2500\\u2500 env\n\\u251C\\u2500\\u2500 requirements.txt\n`)),mdx(\"p\",null,\"Now we will add a new folder called \",mdx(\"inlineCode\",{parentName:\"p\"},\"app\"),\" which will include the next files/folders\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\u251C\\u2500\\u2500 env\n\\u251C\\u2500\\u2500 requirements.txt\n\\u251C\\u2500\\u2500 app\n\\u2502   \\u251C\\u2500\\u2500 main.py\n\\u2502   \\u251C\\u2500\\u2500 youtube_scripts.py\n\\u2502   \\u251C\\u2500\\u2500 static\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 styles.css\n\\u2502   \\u251C\\u2500\\u2500 templates\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 index.html\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 layout.html\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 post.html\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 input.css\n\\u2502   \\u251C\\u2500\\u2500 __init__.py\n\\u2502   \\u251C\\u2500\\u2500 .env\n`)),mdx(\"p\",null,\"I will explain how all these files work throughout this post.\"),mdx(\"h3\",null,\"1.6 \",mdx(\"inlineCode\",{parentName:\"h3\"},\".env\")),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\".env\"),\" file is used to store all the environmental variables for our project. In our case, we're only gonna use one. The youtube_key. There are many security benefits to using this kind of file. For example, by using it the secret keys are not exposed to the client.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-txt\"}),`#.env\nyoutube_key = <Your Youtube API Key>\n`)),mdx(\"h3\",null,\"1.5  \",mdx(\"inlineCode\",{parentName:\"h3\"},\" youtube_scripts.py\")),mdx(\"p\",null,\"This file will contain all the scripts that we're gonna use to interact with the Youtube API and send that data to our frontend.\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://googleapis.github.io/google-api-python-client/docs/dyn/youtube_v3.html\"}),mdx(\"strong\",{parentName:\"a\"},\"Here's\")),\" the documentation for the python library that we're using to extract data. \"),mdx(\"p\",null,\"You can get all the functions that I created for this project and a brief explanation of how they work on my Github repo. \",mdx(\"a\",e({parentName:\"p\"},{href:\"\"}),mdx(\"strong\",{parentName:\"a\"},\"Click here\")),\" to check the repo.\"),mdx(\"p\",null,\"Before we continue, copy and paste the files from Github into the \",mdx(\"inlineCode\",{parentName:\"p\"},\" youtube_scripts.py\"),\". We're gonna use all those functions to retrieve our data from youtube.\"),mdx(\"h2\",null,\"2. FastAPI. The quick version\"),mdx(\"h2\",null,\"3. Adding TailwindCSS\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`npm init -y\n`)),mdx(\"p\",null,\"Now  we're going to add \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://tailwindcss.com/docs\"}),\"Tailwind\"),\" to the project. To do it first we need to install the necessary dependencies inside our \",mdx(\"inlineCode\",{parentName:\"p\"},\"templates\"),\" folder. We do it using the next commands:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`npm install -D tailwindcss\nnpx tailwindcss init\n`)),mdx(\"p\",null,\"This will generate a couple of folders. Open the one called \",mdx(\"inlineCode\",{parentName:\"p\"},\"tailwind.config.js\"),\" and add the next snippet of code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`//tailwind.config.js\n\nmodule.exports = {\n  content: [\"./*.html\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n`)),mdx(\"p\",null,\"Then open the file called \",mdx(\"inlineCode\",{parentName:\"p\"},\"input.css\"),\" and add the next snippet of code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-css\"}),`/* input.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`)),mdx(\"p\",null,\"Finally, run the next command on the terminal.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`npx tailwindcss -i ./input.css -o ./static/output.css --watch\n`)),mdx(\"p\",null,\"This command will start a node server that will generate the style sheet for our project. All the styles will be saved on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"static\"),\" folder.\"),mdx(\"p\",null,\"Our folder structure should look like this at this point:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\u251C\\u2500\\u2500 env\n\\u251C\\u2500\\u2500 requirements.txt\n\\u251C\\u2500\\u2500 app\n\\u2502   \\u251C\\u2500\\u2500 main.py\n\\u2502   \\u251C\\u2500\\u2500 youtube_scripts.py\n\\u2502   \\u251C\\u2500\\u2500 static\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 output.css\n\\u2502   \\u251C\\u2500\\u2500 templates\n\\u2502   \\u2502   \\u251C\\u2500\\u2500node_modules\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 index.html\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 layout.html\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 blog.html\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 input.css\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 package.json\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 tailwind.config.js\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 package.json.lock\n\\u2502   \\u251C\\u2500\\u2500 __init__.py\n\\u2502   \\u251C\\u2500\\u2500 .env\n`)),mdx(\"h2\",null,\"4. Designing the layout\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\"}),`<!--layout.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Twitch App</title>\n    <link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\">\n</head>\n<body>\n    <!-- <div class=\"w-screen h-screen bg-red-200 flex items-center align-center\">\n        <p class=\"text-2xl font-semibold\">Welcome!</p>\n    </div> -->\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n`)),mdx(\"h2\",null,\"4.1 Jinja Syntax\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\"}),`<!-- index.html-->\n\n{% extends \"layout.html\" %}\n{% block content %}\n    <h1>Hello World!</h1>\n{% endblock %}\n`)),mdx(\"h2\",null,\"5. Using ChartJS\"),mdx(\"h2\",null,\"6. Adding a Blog Section\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}